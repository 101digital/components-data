{
  "id": "unit-test-configuration",
  "name": "Unit Test Configuration",
  "jestConfig": {
    "fileName": "jest.config.js",
    "data": "module.exports = {\n  preset: 'react-native',\n  \"transformIgnorePatterns\": [\n    \"node_modules/(?!@ngrx|(?!deck.gl)|ng-dynamic|react-native|react-navigation|react-navigation-redux-helpers|@react-navigation/.*)\"\n  ],\n  \"setupFiles\": [\n    \"<rootDir>/setup-tests.js\"\n  ],\n  \"reporters\": [\n    \"default\",\n    \"jest-html-reporters\"\n  ],\n};"
  },
  "setUpFiles": {
    "fileName": "setup-tests.js",
    "data": "import React from 'react';\nimport {NativeModules} from 'react-native';\n\nglobal.__DEV__ = true;\nglobal.Promise = jest.requireActual('promise');\n\nconst mockNavigation = jest.fn();\n\njest.mock('@react-navigation/native', () => ({\n  ...jest.requireActual('@react-navigation/native'),\n  useNavigation: () => {\n    return mockNavigation;\n  },\n  useIsFocused: () => {\n    return mockNavigation;\n  },\n}));\n\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock'),\n);\n\njest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');\n\n//DEVICE INFO MOCK\nconst asyncFn = response => {\n  return () =>\n    jest.fn(() => {\n      return Promise.resolve(response);\n    });\n};\nconst syncFn = response => () => jest.fn(() => response);\nconst makeFns = response => [asyncFn(response), syncFn(response)];\n\nconst [stringFnAsync, stringFnSync] = makeFns('unknown');\nconst [numberFnAsync, numberFnSync] = makeFns(-1);\nconst [arrayFnAsync, arrayFnSync] = makeFns([]);\nconst [booleanFnAsync, booleanFnSync] = makeFns(false);\nconst [objectFnAsync, objectFnSync] = makeFns({});\n\nconst RNDeviceInfo: any = {};\nconst stringKeys = [\n  'uniqueId',\n  'deviceId',\n  'model',\n  'brand',\n  'systemName',\n  'systemVersion',\n  'bundleId',\n  'appName',\n  'buildNumber',\n  'appVersion',\n  'deviceType',\n];\n\nfor (const key of stringKeys) {\n  RNDeviceInfo[key] = 'unknown-test';\n}\n\nconst booleanKeys = ['isTablet'];\nfor (const key of booleanKeys) {\n  RNDeviceInfo[key] = true;\n}\n\nRNDeviceInfo.syncUniqueId = stringFnAsync();\nRNDeviceInfo.getDeviceToken = stringFnSync();\n\n// string getters\nconst stringFnNames = [\n  'getInstanceId',\n  'getSerialNumber',\n  'getAndroidId',\n  'getIpAddress',\n  'getMacAddress',\n  'getSystemManufacturer',\n  'getBuildId',\n  'getInstallerPackageName',\n  'getDeviceName',\n  'getUserAgent',\n  'getBootloader',\n  'getDevice',\n  'getDisplay',\n  'getFingerprint',\n  'getHardware',\n  'getHost',\n  'getProduct',\n  'getTags',\n  'getType',\n  'getBaseOs',\n  'getSecurityPatch',\n  'getCodename',\n  'getIncremental',\n  'getPhoneNumber',\n  'getCarrier',\n  'getInstallReferrer',\n];\nfor (const name of stringFnNames) {\n  RNDeviceInfo[name] = stringFnAsync();\n  RNDeviceInfo[`${name}Sync`] = stringFnSync();\n}\n\n// boolean getters\nconst booleanFnNames = [\n  'isCameraPresent',\n  'isEmulator',\n  'isPinOrFingerprintSet',\n  'isBatteryCharging',\n  'isAirplaneMode',\n  'hasSystemFeature',\n  'isLocationEnabled',\n  'isHeadphonesConnected',\n];\nfor (const name of booleanFnNames) {\n  RNDeviceInfo[name] = booleanFnAsync();\n  RNDeviceInfo[`${name}Sync`] = booleanFnSync();\n}\n\n// number getters\nconst numberFnNames = [\n  'getUsedMemory',\n  'getFontScale',\n  'getApiLevel',\n  'getPreviewSdkInt',\n  'getFirstInstallTime',\n  'getLastUpdateTime',\n  'getTotalMemory',\n  'getMaxMemory',\n  'getTotalDiskCapacity',\n  'getTotalDiskCapacityOld',\n  'getFreeDiskStorage',\n  'getFreeDiskStorageOld',\n  'getBatteryLevel',\n];\nfor (const name of numberFnNames) {\n  RNDeviceInfo[name] = numberFnAsync();\n  RNDeviceInfo[`${name}Sync`] = numberFnSync();\n}\n\nNativeModules.RNDeviceInfo = RNDeviceInfo;\n\njest.mock('react-native-modal', () => {\n  const React = require('react');\n  const { View } = require('react-native');\n\n  const Modal = jest.fn().mockImplementation(({ children }) => <View>{children}</View>);\n\n  return {\n    __esModule: true,\n    default: Modal,\n  };\n});"
  },
  "eslintrc": {
    "fileName": ".eslintrc.js",
    "data": "module.exports = {\n  root: true,\n  extends: '@react-native',\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: './tsconfig.json',\n  },\n  plugins: ['jest', 'react', '@typescript-eslint', 'babel'],\n  rules: {\n    'no-undef': 'off',\n    'no-console': 2,\n    'prefer-const': 'warn',\n    'no-shadow': 'warn',\n    'no-var': 'warn',\n    'no-new-object': 'warn',\n    '@typescript-eslint/no-unsafe-call': 'warn',\n    '@typescript-eslint/no-shadow': ['warn'],\n    'comma-dangle': ['warn', 'always-multiline'],\n    '@typescript-eslint/no-unused-vars': [\n      'warn',\n      {\n        varsIgnorePattern: '^_',\n        argsIgnorePattern: '^_',\n      },\n    ],\n    'react-hooks/exhaustive-deps': 'warn',\n  },\n};\n"
  },
  "unitTest": {
    "imports": [
      "import React from 'react';",
      "import {render, waitFor, fireEvent} from '@testing-library/react-native';",
      "import {UserProvider} from 'react-native-user-profile-component';",
      "import {AuthProvider} from 'react-native-auth-component';",
      "import Route from '../../src/navigation/routes';",
      "import {BranchProvider} from 'react-native-branch-component';"
    ],
    "describe": [
      "describe('Render $screen correctly', () => {",
      "const navigation = {",
      "    navigate: jest.fn(),",
      "    goBack: jest.fn(),",
      "};",
      "",
      "const screenSetup = () =>",
      "    render(",
      "        <AuthProvider>",
      "            <BranchProvider>",
      "                 <UserProvider>",
      "                      <$screen navigation={navigation}/>",
      "                 </UserProvider>",
      "            </BranchProvider>",
      "        </AuthProvider>",
      "    );",
      "$it",
      "",

      "});"
    ],
    "describe-back-up-with-button": [
      "describe('Render $screen correctly', () => {",
      "const navigation = {",
      "    navigate: jest.fn(),",
      "    goBack: jest.fn(),",
      "};",
      "",
      "const screenSetup = () =>",
      "    render(",
      "        <AuthProvider>",
      "            <BranchProvider>",
      "                 <UserProvider>",
      "                      <$screen navigation={navigation}/>",
      "                 </UserProvider>",
      "            </BranchProvider>",
      "        </AuthProvider>",
      "    );",
      "$it",
      "",
      "it('render buttons correctly', () => {",
      "    const {getByTestId} = screenSetup();",
      "    expect(getByTestId(`btn-deposit`)).toBeTruthy();",
      "    expect(getByTestId(`btn-finance`)).toBeTruthy();",
      "});",
      "",
      "it('deposit button on press and navigate to screen with params correctly', async () => {",
      "    const {getByTestId} = screenSetup();",
      "    await waitFor(() => {",
      "        fireEvent.press(getByTestId('btn-deposit'));",
      "    });",
      "",
      "    await waitFor(() => {",
      "        expect(navigation.navigate).toBeCalledWith(Route.BOTTOM_NAVIGATOR, {",
      "            screen: Route.ACCOUNT_SUMMARY_SCREEN,",
      "            params: { isFinance: false },",
      "        })",
      "    });",
      "});",
      "",
      "it('finance button on press and navigate to screen with params correctly', async () => {",
      "    const {getByTestId} = screenSetup();",
      "    await waitFor(() => {",
      "        fireEvent.press(getByTestId('btn-finance'));",
      "    });",
      "",
      "    await waitFor(() => {",
      "        expect(navigation.navigate).toBeCalledWith(Route.BOTTOM_NAVIGATOR, {",
      "            screen: Route.ACCOUNT_SUMMARY_SCREEN,",
      "            params: { isFinance: true },",
      "        })",
      "    });",
      "});",

      "});"
    ]
  }
}
