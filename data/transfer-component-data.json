{
  "id": "transfer-component",
  "name": "Transfer Component",
  "repository": {
    "type": "git",
    "url": "https://github.com/101digital/transfer-component.git"
  },
  "config": {
    "env": {
      "development": {
        "paymentBaseUrl": "https://api-ud-ow-dev.101digital.io/payment-service/1.0.0",
        "contactBaseUrl": "https://api-ud-ow-dev.101digital.io/contact-service/1.0.0"
      },
      "staging": {
        "paymentBaseUrl": "https://api-ud-ow-dev.101digital.io/payment-service/1.0.0",
        "contactBaseUrl": "https://api-ud-ow-dev.101digital.io/contact-service/1.0.0"
      },
      "production": {
        "paymentBaseUrl": "https://api-ud-ow-dev.101digital.io/payment-service/1.0.0",
        "contactBaseUrl": "https://api-ud-ow-dev.101digital.io/contact-service/1.0.0"
      }
    }
  },
  "dependencies": [],
  "templates": [
    {
      "id": "send-money-ud-ud-template",
      "templateName": "Button to send Money from UD to UD",
      "componentName": "SendMoneyFromUDToUD",
      "imports": [],
      "headers": [],
      "renders": [
        "      <Button label='Send Money' style={{ primaryContainerStyle: { margin: 20 } }} onPress={() => { $fn-send-money }} />"
      ],
      "functions": [
        {
          "id": "fn-send-money",
          "params": []
        }
      ]
    },
    {
      "id": "select-ud-account-component-template",
      "templateName": "Select UD account component",
      "componentName": "SelectUDAccountComponent",
      "imports": ["import { SelectUDAccountComponent } from 'transfer-component';"],
      "renders": [
        "      <SelectUDAccountComponent",
        "        onNewRecipient={() => {",
        "          $fn-new-recipient",
        "        }}",
        "        onSelectedRecipient={(recipient) => {",
        "          $fn-selected-recipient",
        "        }}",
        "      />"
      ],
      "functions": [
        {
          "id": "fn-selected-recipient",
          "params": [
            {
              "name": "recipient",
              "type": "Recipient"
            },
            {
              "name": "isFromContact",
              "type": "bool"
            }
          ]
        },
        {
          "id": "fn-new-recipient"
        }
      ]
    },
    {
      "id": "new-recipient-component-template",
      "templateName": "New recipient component",
      "componentName": "NewRecipientComponent",
      "imports": [
        "import { NewRecipientComponent, TransferContext } from 'transfer-component';",
        "import { AuthContext } from 'react-native-auth-component';"
      ],
      "headers": [
        "  const { errorSearchRecipient, clearErrors } = useContext(TransferContext);",
        "  const { profile } = useContext(AuthContext);"
      ],
      "renders": [
        "        <NewRecipientComponent",
        "          userId={profile?.userId!}",
        "          onNext={(recipient) => {",
        "            $fn-on-next",
        "          }}",
        "        />",
        "        <ErrorModal isShowClose={false} error={getErrorDetails(errorSearchRecipient)} onClose={clearErrors} />"
      ],
      "functions": [
        {
          "id": "fn-on-next",
          "params": [
            {
              "name": "recipient",
              "type": "Recipient"
            },
            {
              "name": "isFromContact",
              "type": "bool"
            }
          ]
        }
      ]
    },
    {
      "id": "transfer-component-template",
      "templateName": "Transfer component",
      "componentName": "TransferComponent",
      "imports": [
        "import { defaultBackButton } from '@/navigation/main-navigator';",
        "import { WalletContext } from '@banking-component/wallet-component';",
        "import { Recipient, TransferComponent, TransferStatus } from 'transfer-component';",
        "import {",
        "  TransferComponentRef,",
        "  TransferStep,",
        "} from 'transfer-component/src/components/transfer-component';"
      ],
      "headers": [
        " const { recipient, isFromContact } = route.params;",
        "  const { getDefaultWallet } = useContext(WalletContext);",
        "  const [step, setStep] = useState<TransferStep>(TransferStep.initial);",
        "  const [status, setStatus] = useState<TransferStatus>(TransferStatus.progressing);",
        "",
        "  const userAccId = getDefaultWallet()?.bankAccount.accountId;",
        "  const transferComponentRef = useRef<TransferComponentRef>();",
        "",
        "  useEffect(() => {",
        "    navigation.addListener('beforeRemove', handleBackButton);",
        "    return () => {",
        "      navigation.removeListener('beforeRemove', handleBackButton);",
        "    };",
        "  }, [navigation, status, step]);",
        "",
        "  const handleBackButton = (e: any) => {",
        "    if (step === TransferStep.review) {",
        "      transferComponentRef?.current?.changeStep(TransferStep.initial);",
        "      e.preventDefault();",
        "    }",
        "    if (step === TransferStep.authorize) {",
        "      transferComponentRef?.current?.changeStep(TransferStep.review);",
        "      e.preventDefault();",
        "    }",
        "    if (step === TransferStep.status) {",
        "      if (status === TransferStatus.progressing) {",
        "        e.preventDefault();",
        "      }",
        "    }",
        "  };",
        "",
        "  React.useLayoutEffect(() => {",
        "    navigation.setOptions({",
        "      headerShown: status !== TransferStatus.failed,",
        "      headerRight: () => {",
        "        return step === TransferStep.status && status === TransferStatus.success ? (",
        "          <Text>{'Share'}</Text>",
        "        ) : (",
        "          <View />",
        "        );",
        "      },",
        "      headerLeft: () => {",
        "        return step !== TransferStep.status ? defaultBackButton(navigation) : <View />;",
        "      },",
        "    });",
        "  }, [navigation, status]);"
      ],
      "renders": [
        " <TransferComponent",
        "        ref={transferComponentRef}",
        "        recipient={recipient}",
        "        isFromContact={isFromContact}",
        "        userAccountId={userAccId ?? ''}",
        "        maxAmount={100000}",
        "        onDone={() => {",
        "           $fn-on-done",
        "        }}",
        "        onChangedStep={setStep}",
        "        onChangedStatus={setStatus}",
        "        currencyCode={'PHP'}",
        "      />"
      ],
      "functions": [
        {
          "id": "fn-on-done",
          "params": []
        }
      ]
    }
  ],
  "texts": {
    "input_transfer_component": {
      "lbl_header_title": "Send now to",
      "lbl_header_subtitle": "Please enter recipient's details below.",
      "lbl_account_number": "Account number",
      "plh_account_number": "Enter account number",
      "lbl_account_name": "Account name",
      "plh_account_name": "Enter account name",
      "lbl_enter_amount": "Enter amount (min. of Php 1)",
      "plh_enter_amount": "Enter amount",
      "lbl_purpose_transfer": "Purpose of transfer",
      "plh_select_purpose_transfer": "Select a purpose",
      "plh_enter_purpose_transfer": "Enter purpose of transfer",
      "lbl_note": "Note to recipient (Optional)",
      "plh_note": "Add note",
      "btn_next": "Next",
      "btn_select": "Select"
    },
    "review_transfer_component": {
      "lbl_header_title": "Review transfer",
      "lbl_header_subtitle": "Please make sure all account details are correct. Your account will be debited and this transaction will be irreversible once confirmed.",
      "btn_confirm_transaction": "Confirm transaction"
    },
    "detail_transfer_component": {
      "lbl_from": "From",
      "lbl_send_money_to": "Send money to",
      "lbl_when": "When",
      "lbl_purpose_transfer": "Purpose of transfer",
      "lbl_note": "Note to recipient",
      "lbl_amount": "Amount",
      "lbl_transaction_fee": "Transaction Fee",
      "lbl_total_amount": "Total amount"
    },
    "authorize_transfer_component": {
      "lbl_header_title": "Please enter your passcode",
      "lbl_header_subtitle": "Enter the One-Time Password (OTP) sent on your registered mobile number.",
      "lbl_didnt_receive_otp": "Didn't receive a code? ",
      "lbl_duration_format": "Send another (in %s sec)",
      "btn_send_another": "Send another",
      "btn_continue": "Continue"
    },
    "transfer_status_component": {
      "lbl_hang_on": "Hang on for a moment",
      "msg_hang_on_transaction": "We're currently setting up your transaction.",
      "lbl_transfer_unsuccessful": "Transfer Request\nUnsuccessful!",
      "msg_transfer_unsuccessful": "Your money has been returned to your Pitaka. Please try again at a later time.",
      "btn_back_to_top": "Back to My Pitaka",
      "lbl_transfer_successful": "Transfer Request\nSuccessful!",
      "msg_transfer_successful": "Your money is on its way and should arrive instantly.",
      "lbl_transaction_date": "Transaction Date / Time",
      "lbl_reference_no": "Reference No.",
      "btn_add_contact": "Add to contacts",
      "msg_contact_add_successful": "Contact is added successful"
    },
    "select_ud_account_component": {
      "lbl_header_title": "Send to another\nUnionDigital account",
      "lbl_header_subtitle": "Who are you sending your money to?",
      "btn_new_recipient": "New Recipient",
      "lbl_recent_contact": "Recent Contacts",
      "btn_view_all": "View all"
    },
    "new_recipient_component": {
      "lbl_header_title": "New Recipient",
      "lbl_header_subtitle": "Please enter recipient's mobile no. or account number.",
      "lbl_send_money_to": "Send money to",
      "btn_mobile": "Mobile",
      "btn_account": "Account",
      "lbl_mobile_number": "Mobile number",
      "lbl_account_number": "UD account number",
      "plh_mobile_number": "ex. 09123456789 or +639123456789",
      "plh_account_number": "Enter UD account number",
      "btn_proceed": "Proceed"
    }
  }
}
