{
  "id": "wallet-component",
  "name": "Wallet Component",
  "repository": {
    "type": "git",
    "url": "https://github.com/101digital/react-native-banking-components.git",
    "directory": "packages/wallet-component"
  },
  "config": {
    "env": {
      "development": {
        "walletBaseUrl": "https://sandbox.101digital.io/wallet-service/1.0.0",
        "financialBaseUrl": "https://sandbox.101digital.io/financial-profile-service/1.0.0"
      },
      "staging": {
        "walletBaseUrl": "https://sandbox.101digital.io/wallet-service/1.0.0",
        "financialBaseUrl": "https://sandbox.101digital.io/financial-profile-service/1.0.0"
      },
      "production": {
        "walletBaseUrl": "https://api.101digital.io/wallet-service/v1.0",
        "financialBaseUrl": "https://api.101digital.io/financial-profile-service/1.0.0"
      }
    }
  },
  "dependencies": [
    {
      "name": "https://github.com/101digital/react-native-theme-component.git"
    },
    {
      "name": "https://gitpkg.now.sh/101digital/react-native-banking-components/packages/core"
    }
  ],
  "templates": [
    {
      "id": "wallet-component-template-1",
      "templateName": "Wallet component template 1",
      "componentName": "WalletComponent",
      "import": "import { WalletComponent, WalletComponentRefs, WalletContext } from '@banking-component/wallet-component';\nimport { AccountLinkingContext } from '@banking-component/account-linking';\nimport { ErrorModal, ThemeContext, useCurrencyFormat } from 'react-native-theme-component';\nimport { CompasionRequestParams, ProductContext, RecommandBannerComponent } from 'product-comparison-component';\nimport { isEmpty } from '@banking-component/core';\nimport { getErrorDetails } from '@/helpers/generic-errors';",
      "header": "\n\tconst accountRef = useRef<WalletComponentRefs>();\n\tconst { fetchWallets, wallets, errorUnlinkWallet, errorUpdatePrimary, clearWalletErrors, errorLinkWallet } = useContext(WalletContext);\n\tconst { bankImages } = useContext(AccountLinkingContext);\n\tconst { i18n, colors } = useContext(ThemeContext);\n\tconst { getComparisons, comparisons, clearComparisons } = useContext(ProductContext);\n\tuseEffect(() => {\n\t\tif (isEmpty(wallets)) {\n\t\t\tfetchWallets();\n\t\t}\n\t}, []);\n\tuseEffect(() => {\n\t\tif (!isEmpty(wallets)) {\n\t\t\tconst params: CompasionRequestParams[] = wallets.map((w) => ({\n\t\t\t\twalletId: w.walletId,\n\t\t\t\taccountSubtype: w.bankAccount.accountSubType,\n\t\t\t\tproductId: w.bankAccount.productId,\n\t\t\t\tamount: Math.abs(w.currentBalance),\n\t\t\t\tproductCategory: w.bankAccount.internalProductCategory,\n\t\t\t\tcountryCode: w.bankAccount.countryCode,\n\t\t\t\tbankId: w.bankAccount.bankCode,\n\t\t\t}));\n\t\t\tclearComparisons();\n\t\t\tgetComparisons(params);\n\t\t}\n\t}, [wallets]);\n\tuseEffect(() => {\n\t\tif (!isEmpty(comparisons)) {\n\t\t\tfor (var c of comparisons) {\n\t\t\t\tconst _wallet = wallets.find((w) => w.walletId === c.walletId);\n\t\t\t\tif (_wallet) {\n\t\t\t\t\taccountRef?.current?.showRecommandBanner(_wallet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [comparisons.length]);",
      "body": "<WalletComponent ref={accountRef} Root={{ props: { i18n: i18n, formatCurrency: useCurrencyFormat, bankImages: bankImages, }, }} Balance={{ style: { containerStyle: { backgroundColor: colors.primaryColor, }, titleTextStyle: { color: 'white', }, amountTextStyle: { fontSize: 35, lineHeight: 53, color: 'white', }, }, }} WalletItem={{ props: { onItemPressed: (wallet) => { accountRef?.current?.showActionsSheet(wallet); }, }, components: { recommandBanner: (wallet) => ( <RecommandBannerComponent i18n={i18n} walletId={wallet.walletId} formatCurrency={(amount) => useCurrencyFormat(amount, wallet.currencyCode)} gradientColors={['#5d21d2', '#8B5DE6']} onTakeLook={() => { $fn-look-recommand }} /> ), }, }} LinkAccountButton={{ props: { onLinkAccountPressed: () => { $fn-link-account }, }, }} EmptyWallet={{ props: { onLinkAccountPressed: () => { $fn-link-account }, }, style: { buttonTextStyle: { color: colors.primaryColor, }, }, }} ActionSheet={{ props: { onSetPrimary: (wallet) => { accountRef?.current?.setAsPrimary(wallet); }, onUnlink: (wallet) => { accountRef?.current?.unlinkWallet(wallet); }, onViewTransactions: (wallet) => { $fn-view-transaction }, onShare: (wallet) => { $fn-share-account }, }, }} ConfirmSetPrimaryModal={{ props: { isFullWidth: false, isShowClose: false, }, }} ConfirmUnlinkModal={{ props: { isFullWidth: false, isShowClose: false, }, }} />\n<ErrorModal error={getErrorDetails(errorUnlinkWallet)} onClose={clearWalletErrors} />\n<ErrorModal error={getErrorDetails(errorLinkWallet)} onClose={clearWalletErrors} />\n<ErrorModal error={getErrorDetails(errorUpdatePrimary)} onClose={clearWalletErrors} />",
      "functions": [
        {
          "id": "fn-look-recommand",
          "params": []
        },
        {
          "id": "fn-link-account",
          "params": []
        },
        {
          "id": "fn-view-transaction",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-share-account",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        }
      ]
    }
  ],
  "texts": {
    "wallet_component": {
      "lbl_link_successfully": "Account Added Succefully",
      "msg_link_successfully": "Your bank account is successfully linked to your profile.",
      "btn_continue": "Continue",
      "lbl_unlink_account": "Unlink Bank Account",
      "msg_unlink_account": "Are you sure? once unlinked, you cannot undo this action.",
      "btn_cancel": "Cancel",
      "lbl_confirmation": "Confirmation",
      "msg_set_primary": "Are you sure you want to set %s as the primary account?.",
      "btn_set_primary": "Set as primary account",
      "btn_unlink_account": "Unlink bank account",
      "btn_view_transaction": "View transactions",
      "lbl_total_balance": "Total Available Balance",
      "btn_link_bank_account": "Link Bank Account",
      "lbl_set_as_primary": "Set as primary",
      "lbl_primary": "Primary",
      "msg_no_wallet": "No Bank Account Linked",
      "btn_view_cashflow": "View Cashflow",
      "lbl_cashflow": "Cashflow",
      "msg_cashflow": "View cashflow chart for your money in & money out to analyse your spending.",
      "btn_view": "View",
      "btn_share_information": "Share Information"
    },
    "share_information_component": {
      "lbl_recipient_email": "Recipient Email",
      "plh_enter_recipient_email": "Enter recipient email",
      "lbl_message": "Message (Optional)",
      "plh_enter_message": "Enter message",
      "lbl_data_share": "Data To Share",
      "lbl_data_account": "Account",
      "lbl_select_account": "Select a account",
      "lbl_account_transaction": "Account & Transaction Details",
      "lbl_invoices": "Invoices",
      "lbl_date_range": "Date Range",
      "lbl_from": "From",
      "lbl_to": "To",
      "val_enter_email": "Recipient email is required",
      "val_email_invalid": "Recipient email is invalid",
      "lbl_send_copy": "Send me a copy of this",
      "btn_cancel": "Cancel",
      "btn_share": "Share",
      "btn_continue": "Continue",
      "lbl_confirmation": "Confirmation",
      "msg_confirm_share": "Are you sure you want to share these sensitive information? Please click “Continue” to proceed.",
      "msg_shared_successfully": "Account Information are sent successfully",
      "lbl_unable_share": "Unable to share",
      "msg_share_failed": "An error occured while trying to share your transaction details. Please try again."
    }
  }
}
