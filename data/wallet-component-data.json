{
  "id": "wallet-component",
  "name": "Wallet Component",
  "repository": {
    "type": "git",
    "url": "https://github.com/101digital/react-native-banking-components.git",
    "directory": "packages/wallet-component"
  },
  "config": {
    "env": {
      "development": {
        "walletBaseUrl": "https://sandbox.101digital.io/wallet-service/1.0.0",
        "financialBaseUrl": "https://sandbox.101digital.io/financial-profile-service/1.0.0"
      },
      "staging": {
        "walletBaseUrl": "https://sandbox.101digital.io/wallet-service/1.0.0",
        "financialBaseUrl": "https://sandbox.101digital.io/financial-profile-service/1.0.0"
      },
      "production": {
        "walletBaseUrl": "https://api.101digital.io/wallet-service/v1.0",
        "financialBaseUrl": "https://sandbox.101digital.io/financial-profile-service/1.0.0"
      }
    }
  },
  "dependencies": [
    {
      "name": "https://github.com/101digital/react-native-theme-component.git"
    },
    {
      "name": "https://gitpkg.now.sh/101digital/react-native-banking-components/packages/core"
    }
  ],
  "templates": [
    {
      "id": "wallet-list-component-template-1",
      "templateName": "Wallet List component template 1",
      "componentName": "WalletListComponent",
      "imports": [
        "import { WalletListComponent, WalletListComponentRefs, WalletContext } from '@banking-component/wallet-component';",
        "import { AccountLinkingContext } from '@banking-component/account-linking';",
        "import { ThemeContext, useCurrencyFormat } from 'react-native-theme-component';",
        "import { CompasionRequestParams, ProductContext, RecommandBannerComponent } from 'product-comparison-component';",
        "import { isEmpty } from 'lodash';"
      ],
      "headers": [
        "const accountRef = useRef<WalletListComponentRefs>();",
        "  const {",
        "    getWallets,",
        "    wallets,",
        "    errorUnlinkWallet,",
        "    errorUpdatePrimary,",
        "    clearWalletErrors,",
        "    errorLinkWallet,",
        "  } = useContext(WalletContext);",
        "",
        "  const { bankImages, banks, getBanks } = useContext(AccountLinkingContext);",
        "  const { i18n, colors } = useContext(ThemeContext);",
        "  const { getComparisons, comparisons, clearComparisons } = useContext(ProductContext);",
        "",
        "  useEffect(() => {",
        "    if (isEmpty(wallets)) {",
        "      getWallets();",
        "    }",
        "    if (isEmpty(banks)) {",
        "      getBanks();",
        "    }",
        "  }, []);",
        "",
        "  useEffect(() => {",
        "    if (!isEmpty(wallets)) {",
        "      const params: CompasionRequestParams[] = wallets.map((w) => ({",
        "        walletId: w.walletId,",
        "        accountSubtype: w.bankAccount.accountSubType,",
        "        productId: w.bankAccount.productId,",
        "        amount: Math.abs(w.currentBalance),",
        "        productCategory: w.bankAccount.internalProductCategory,",
        "        countryCode: w.bankAccount.countryCode,",
        "        bankId: w.bankAccount.bankCode,",
        "      }));",
        "      clearComparisons();",
        "      getComparisons(params);",
        "    }",
        "  }, [wallets]);",
        "",
        "  useEffect(() => {",
        "    if (!isEmpty(comparisons)) {",
        "      for (var c of comparisons) {",
        "        const _wallet = wallets.find((w) => w.walletId === c.walletId);",
        "        if (_wallet) {",
        "          accountRef?.current?.showRecommandBanner(_wallet);",
        "        }",
        "      }",
        "    }",
        "  }, [comparisons.length]);"
      ],
      "renders": [
        "      <WalletListComponent",
        "        ref={accountRef}",
        "        Root={{ props: { bankImages: bankImages } }}",
        "        Balance={{",
        "          style: {",
        "            containerStyle: { backgroundColor: colors.primaryColor },",
        "            titleTextStyle: { color: 'white' },",
        "            amountTextStyle: { fontSize: 35, lineHeight: 53, color: 'white' },",
        "          },",
        "        }}",
        "        WalletItem={{",
        "          props: {",
        "            onItemPressed: (wallet) => {",
        "              accountRef?.current?.showActionsSheet(wallet);",
        "            },",
        "          },",
        "          components: {",
        "            recommandBanner: (wallet) => (",
        "              <RecommandBannerComponent",
        "                i18n={i18n}",
        "                walletId={wallet.walletId}",
        "                formatCurrency={(amount) => useCurrencyFormat(amount, wallet.currencyCode)}",
        "                gradientColors={['#5d21d2', '#8B5DE6']}",
        "                onTakeLook={() => {",
        "                  $fn-look-recommand",
        "                }}",
        "              />",
        "            ),",
        "          },",
        "        }}",
        "        LinkAccountButton={{",
        "          props: {",
        "            onLinkAccountPressed: () => {",
        "              $fn-link-account",
        "            },",
        "          },",
        "        }}",
        "        EmptyWallet={{",
        "          props: {",
        "            onLinkAccountPressed: () => {",
        "              $fn-link-account",
        "            },",
        "          },",
        "          style: { buttonTextStyle: { color: colors.primaryColor } },",
        "        }}",
        "        ActionSheet={{",
        "          props: {",
        "            onSetPrimary: (wallet) => {",
        "              accountRef?.current?.setAsPrimary(wallet);",
        "            },",
        "            onUnlink: (wallet) => {",
        "              accountRef?.current?.unlinkWallet(wallet);",
        "            },",
        "            onViewTransactions: (wallet) => {",
        "              $fn-view-transaction",
        "            },",
        "            onShare: (wallet) => {",
        "              $fn-share-account",
        "            },",
        "          },",
        "        }}",
        "        ConfirmSetPrimaryModal={{ props: { isFullWidth: false, isShowClose: false } }}",
        "        ConfirmUnlinkModal={{ props: { isFullWidth: false, isShowClose: false } }}",
        "      />",
        "      <ErrorModal error={getErrorDetails(errorUnlinkWallet)} onClose={clearWalletErrors} />",
        "      <ErrorModal error={getErrorDetails(errorLinkWallet)} onClose={clearWalletErrors} />",
        "      <ErrorModal error={getErrorDetails(errorUpdatePrimary)} onClose={clearWalletErrors} />"
      ],
      "functions": [
        {
          "id": "fn-look-recommand",
          "params": []
        },
        {
          "id": "fn-link-account",
          "params": []
        },
        {
          "id": "fn-view-transaction",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-share-account",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        }
      ]
    },
    {
      "id": "transaction-list-component-template-1",
      "templateName": "Transaction List component template 1",
      "componentName": "TransactionListComponent",
      "imports": [
        "import { Dimensions } from 'react-native';",
        "import { TransactionListComponent, WalletContext, Wallet } from '@banking-component/wallet-component';",
        "const { width } = Dimensions.get('window');"
      ],
      "headers": [
        "  const initWallet = route?.params?.wallet;",
        "  const { transactionError, clearTransactionError } = useContext(WalletContext);"
      ],
      "renders": [
        "      <TransactionListComponent",
        "        CarouselItem={{ props: { carouselItemWidth: width - 32, carouselWidth: width } }}",
        "        Root={{",
        "          props: {",
        "            initWallet,",
        "          },",
        "        }}",
        "        EmptyWallet={{",
        "          props: {",
        "            onLinkAccountPressed: () => {",
        "              $fn-link-account",
        "            },",
        "          },",
        "        }}",
        "      />",
        "      <ErrorModal",
        "        error={getErrorDetails(transactionError)}",
        "        onClose={clearTransactionError}",
        "        timeOut",
        "      />"
      ],
      "functions": [
        {
          "id": "fn-link-account",
          "params": []
        }
      ]
    },
    {
      "id": "wallets-card-component-template-1",
      "templateName": "Wallet Card component template 1",
      "componentName": "WalletCardComponent",
      "imports": [
        "import { Dimensions } from 'react-native';",
        "import { AuthContext } from 'react-native-auth-component';",
        "import { WalletCardComponent, WalletContext } from '@banking-component/wallet-component';",
        "import { isEmpty } from 'lodash';",
        "const { width } = Dimensions.get('window');"
      ],
      "headers": [
        "  const { profile } = useContext(AuthContext);",
        "  const { getWallets, wallets } = useContext(WalletContext);",
        "",
        "  useEffect(() => {",
        "    if (isEmpty(wallets)) {",
        "      getWallets();",
        "    }",
        "  }, []);",
        "   const walletTypeList = [",
        "      { id: 0, itemName: 'Pitaka' },",
        "      { id: 1, itemName: 'Crypto' },",
        "    ];"
      ],
      "renders": [
        "        <WalletCardComponent",
        "          phoneNumber={profile?.mobileNumber ?? ''}",
        "          carouselItemWidth={width - 50}",
        "          walletList={walletTypeList}",
        "          onLinkAccount={(_) => {",
        "            $fn-crypto-dashboard",
        "          }}",
        "          onAddMoney={(wallet) => {",
        "            $fn-add-money",
        "          }}",
        "          onSendMoney={(wallet) => {",
        "            $fn-send-money",
        "          }}",
        "          onViewAllTransactions={(wallet) => {",
        "            $fn-view-all-transactions",
        "          }}",
        "          onTransactionDetails={(transaction) => {",
        "            $fn-transaction-details",
        "          }}",
        "        />"
      ],
      "functions": [
        {
          "id": "fn-add-money",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-send-money",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-view-all-transactions",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-transaction-details",
          "params": [
            {
              "name": "transaction",
              "type": "Transaction"
            }
          ]
        },
        {
          "id": "fn-crypto-dashboard",
          "params": []
        }
      ]
    },
    {
      "id": "wallets-card-component-template-2",
      "templateName": "Wallet Card component template 2",
      "componentName": "WalletCardComponent",
      "imports": [
        "import { Dimensions } from 'react-native';",
        "import { AuthContext } from 'react-native-auth-component';",
        "import { WalletCardComponent, WalletContext } from '@banking-component/wallet-component';",
        "import { statusBarHeight } from 'react-native-theme-component/src/utils/device-utils';",
        "import { isEmpty } from 'lodash';",
        "const { width } = Dimensions.get('window');"
      ],
      "headers": [
        "  const { profile } = useContext(AuthContext);",
        "  const { getWallets, wallets } = useContext(WalletContext);",
        "",
        "  useEffect(() => {",
        "    if (isEmpty(wallets)) {",
        "      getWallets();",
        "    }",
        "  }, []);",
        "   const walletTypeList = [",
        "      { id: 0, itemName: 'Pitaka' },",
        "      { id: 1, itemName: 'Crypto' },",
        "    ];"
      ],
      "renders": [
        "        <WalletCardComponent",
        "          phoneNumber={profile?.mobileNumber ?? ''}",
        "          carouselItemWidth={width - 50}",
        "          walletList={walletTypeList}",
        "          onLinkAccount={(_) => {",
        "            $fn-crypto-dashboard",
        "          }}",
        "          onViewAccount={(_) => {",
        "            $fn-crypto-dashboard2",
        "          }}",
        "          onAddMoney={(wallet) => {",
        "            $fn-add-money",
        "          }}",
        "          onSendMoney={(wallet) => {",
        "            $fn-send-money",
        "          }}",
        "          onViewAllTransactions={(wallet) => {",
        "            $fn-view-all-transactions",
        "          }}",
        "          onTransactionDetails={(transaction) => {",
        "            $fn-transaction-details",
        "          }}",
        "          style={{",
        "            containerStyle: {",
        "              position: 'absolute',",
        "              top: 127 + statusBarHeight,",
        "              zIndex: 1,",
        "            },",
        "            transactionCardComponentStyle:{",
        "              transactionItemComponentStyle: {",
        "                descriptionTextStyle: {",
        "                  maxWidth: '85%',",
        "                },",
        "              },",
        "            }",
        "          }}",
        "        />"
      ],
      "functions": [
        {
          "id": "fn-add-money",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-send-money",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-view-all-transactions",
          "params": [
            {
              "name": "wallet",
              "type": "Wallet"
            }
          ]
        },
        {
          "id": "fn-transaction-details",
          "params": [
            {
              "name": "transaction",
              "type": "Transaction"
            }
          ]
        },
        {
          "id": "fn-crypto-dashboard",
          "params": [
            {
              "data": false,
              "isLink": false
            }
          ]
        },
        {
          "id": "fn-crypto-dashboard2",
          "params": [
            {
              "data": true,
              "isLink": false
            }
          ]
        }
      ]
    },
    {
      "id": "recent-transaction-component-template",
      "templateName": "Recent transaction component template",
      "componentName": "RecentTransactionComponent",
      "imports": [
        "import { RecentTransactionComponent, WalletContext, Wallet } from '@banking-component/wallet-component';"
      ],
      "headers": [
        "  const { wallet } = route.params;"
      ],
      "renders": [
        "      <RecentTransactionComponent",
        "        onAddMoney={() => {",
        "          $fn-add-money",
        "        }}",
        "        wallet={wallet}",
        "        onTransactionDetails={(transaction) => {",
        "          $fn-transaction-detail",
        "        }}",
        "      />"
      ],
      "functions": [
        {
          "id": "fn-add-money",
          "params": []
        },
        {
          "id": "fn-transaction-detail",
          "params": [
            {
              "name": "transaction",
              "type": "Transaction"
            }
          ]
        }
      ]
    },
    {
      "id": "transaction-details-component-template",
      "templateName": "Transaction details component template",
      "componentName": "TransactionDetailsComponent",
      "imports": [
        "import { Transaction, TransactionDetailsComponent  } from '@banking-component/wallet-component';"
      ],
      "headers": [
        "  const { transaction } = route.params;"
      ],
      "renders": [
        "      <TransactionDetailsComponent",
        "        transaction={transaction}",
        "        onBack={() => {",
        "          $fn-on-back",
        "        }}",
        "      />"
      ],
      "functions": [
        {
          "id": "fn-on-back",
          "params": []
        }
      ]
    },
    {
      "id": "add-money-component-template",
      "templateName": "Add Money component template",
      "componentName": "AddMoneyComponent",
      "imports": [
        "//import { BackIcon, CopyIcon } from '../../assets/icons';",
        "import { TouchableOpacity, Dimensions  } from 'react-native';",
        "import Clipboard from '@react-native-clipboard/clipboard';",
        "import { WalletContext,ArrowBack ,CopyIcon} from '@banking-component/wallet-component';",
        "const windowWidth = Dimensions.get('window').width;"
      ],
      "headers": [
        "  const { transaction } = route.params;",
        "  const { colors,fonts } = useContext(ThemeContext);",
        "  const { getDefaultWallet } = useContext(WalletContext);",
        "  const [walletDetails, setWalletDetails] = useState<any>('');",
        "  const [isCopyed, setIsCopyed] = useState<boolean>(false);",
        "  useEffect(() => {",
        "    let details = getDefaultWallet();",
        "    setWalletDetails(details);",
        "  }, []); // eslint-disable-line react-hooks/exhaustive-deps",
        "  ",
        "  useEffect(() => {",
        "    if (isCopyed) {",
        "      setTimeout(() => {",
        "        setIsCopyed(false);",
        "      }, 2000);",
        "    }",
        "  }, [isCopyed]);"
      ],
      "renders": [
        "      <>",
        "              <TouchableOpacity",
        "                activeOpacity={0.8}",
        "                onPress={() => {",
        "                  navigation.goBack();",
        "                }}",
        "                style={{padding: 15,marginLeft: 12,marginBottom: 8,width: 100,}}",
        "              >",
        "                {<ArrowBack width={17} height={12} />}",
        "              </TouchableOpacity>",
        "              <Text style={{fontFamily: fonts.bold,fontSize: 24,lineHeight: 36,color: colors.primaryColor,paddingHorizontal: 24,marginBottom: 16,}}>{i18n.t('add_money.lbl_title')}</Text>",
        "              <Text style={{ fontFamily: fonts.medium,fontSize: 14,lineHeight: 24,color: '#4E4B50',paddingHorizontal: 24,marginBottom: 16,}}>",
        "                {i18n?.t('add_money.msg_description') ??",
        "                  'In your bank’s app or online banking, enter the following information:'}",
        "              </Text>",
        "              <View activeOpacity={0.8} style={{    height: 220,borderRadius: 8,backgroundColor: 'white',shadowOffset: {width: 0,height: 1,},shadowOpacity: 0.1,shadowRadius: 1,shadowColor: '#000000',marginHorizontal: 24,marginVertical: 8,alignItems: 'center',paddingHorizontal: 20,flexDirection: 'row',paddingVertical: 15}}>",
        "                <View style={{width: '100%',justifyContent: 'space-between'}}>",
        "                  <Text style={{flexWrap: 'wrap',fontFamily: fonts.medium,fontSize: 14,lineHeight: 24,fontWeight: '500',color: '#7F7B82',}}>{i18n?.t('add_money.lbl_name')}</Text>",
        "                  <View style={{flex: 1,flexDirection: 'row',justifyContent: 'space-between'}}>",
        "                    <Text style={{flex: 1,fontFamily: fonts.medium,fontSize: 12,lineHeight: 21,fontWeight: '500',color: '#000000'}}>",
        "                      {walletDetails ? walletDetails.bankAccount.accountHolderName : ''}",
        "                    </Text>",
        "                    <TouchableOpacity",
        "                      onPress={() => {",
        "                        if (walletDetails) {",
        "                          setIsCopyed(true);",
        "                          Clipboard.setString(walletDetails.bankAccount.accountHolderName);",
        "                        }",
        "                      }}",
        "                    >",
        "                      <CopyIcon width={24} height={24} />",
        "                    </TouchableOpacity>",
        "                  </View>",
        "                  <Text style={{flexWrap: 'wrap',fontFamily: fonts.medium,fontSize: 14,lineHeight: 24,fontWeight: '500',color: '#7F7B82',}}>{i18n?.t('add_money.lbl_bank')}</Text>",
        "                  <View style={{flex: 1,flexDirection: 'row',justifyContent: 'space-between'}}>",
        "                    <Text style={{flex: 1,fontFamily: fonts.medium,fontSize: 12,lineHeight: 21,fontWeight: '500',color: '#000000'}}>{'UnionDigital Bank'}</Text>",
        "                    <TouchableOpacity",
        "                      onPress={() => {",
        "                        if (walletDetails) {",
        "                          setIsCopyed(true);",
        "                          Clipboard.setString(walletDetails.bankAccount.accountHolderName);",
        "                        }",
        "                      }}",
        "                    >",
        "                      <CopyIcon width={24} height={24} />",
        "                    </TouchableOpacity>",
        "                  </View>",
        "                  <Text style={{flexWrap: 'wrap',fontFamily: fonts.medium,fontSize: 14,lineHeight: 24,fontWeight: '500',color: '#7F7B82',}}>{i18n?.t('add_money.lbl_account_number')}</Text>",
        "                  <View style={{flex: 1,flexDirection: 'row',justifyContent: 'space-between'}}>",
        "                    <Text style={{flex: 1,fontFamily: fonts.medium,fontSize: 12,lineHeight: 21,fontWeight: '500',color: '#000000',}}>",
        "                      {walletDetails ? walletDetails.bankAccount.accountNumber : ''}",
        "                    </Text>",
        "                    <TouchableOpacity",
        "                      onPress={() => {",
        "                        if (walletDetails) {",
        "                          setIsCopyed(true);",
        "                          Clipboard.setString(walletDetails.bankAccount.accountNumber);",
        "                        }",
        "                      }}",
        "                    >",
        "                      <CopyIcon width={24} height={24} />",
        "                    </TouchableOpacity>",
        "                  </View>",
        "                </View>",
        "              </View>",
        "              <View style={{borderRadius: 8,backgroundColor: '#E7DBF5',padding: 15,marginHorizontal: 24,marginTop: 10,}}>",
        "                <Text style={{    fontFamily: fonts.regular,fontSize: 10,color: colors.primaryColor,}}>",
        "                  {'Note: Check your bank’s cut-off times, to make sure that you get your funds on time.'}",
        "                </Text>",
        "              </View>",
        "              {isCopyed && (",
        "                <View style={{borderRadius: 8,backgroundColor: '#1D1C1D',padding: 15,marginHorizontal: 24,position: 'absolute',bottom: 20,  width: windowWidth - 48,}}>",
        "                  <Text style={{fontFamily: fonts.regular,fontSize: 12,color: '#fff',fontWeight: '500'}}>{'Text has been copied to your clipboard.'}</Text>",
        "                </View>",
        "              )}",
        "</>"
      ],
      "functions": [
        {
          "id": "fn-on-back",
          "params": []
        }
      ]
    },
    {
      "id": "crypto-dashboard-component-template",
      "templateName": "Crypto Dashboard Screen",
      "componentName": "CryptoCardComponent",
      "imports": [
        "import { ThemeContext } from 'react-native-theme-component';",
        "import {   TouchableOpacity, Dimensions } from 'react-native';",
        "import { ArrowBack,PadaxIcon,Page1, Page2, Page3 } from '@banking-component/wallet-component';",
        "import { CryptoCardComponent } from '@banking-component/wallet-component/src/components/crypto-components';",
        "import { Carousel } from 'account-origination-component/src/components/carousel';",
        "const { width } = Dimensions.get('window');"
      ],
      "headers": [
        "  const { colors } = useContext(ThemeContext);",
        "  const [isActive, setIsActive] = useState<boolean>(false);",
        "  const [isWithToolTip, setIsWithToolTip] = useState<boolean>(false);",
        "",
        "  useEffect(() => {",
        "    if (route.params && route.params.data) {",
        "      setIsActive(route.params.data);",
        "    }",
        "    if (route.params && route.params.isLink) {",
        "      setIsWithToolTip(route.params.isLink);",
        "    }",
        "  }, [route]);",
        "  const carouselList = [",
        "    { item: <Page1 width={170} height={254} /> },",
        "    { item: <Page2 width={170} height={254} /> },",
        "    { item: <Page3 width={170} height={254} /> },",
        "  ];",
        "",
        "  const walletTypeList = [{ id: 1, itemName: 'Crypto' }];"
      ],
      "renders": [
        "        <>",
        "            <View style={{flex: 1,backgroundColor: '#F1F6FC'}}>",
        "              <SafeAreaView>",
        "                <View style={{",
        "                  flexDirection: 'row',",
        "                  marginHorizontal: 25,",
        "                  justifyContent: 'space-between',",
        "                  marginTop: 24,",
        "                }}>",
        "                  <TouchableOpacity",
        "                    onPress={() => {",
        "                      navigation.goBack();",
        "                    }}",
        "                  >",
        "                    <ArrowBack />",
        "                  </TouchableOpacity>",
        "                  <PadaxIcon />",
        "                </View>",
        "              </SafeAreaView>",
        "        ",
        "              <CryptoCardComponent",
        "                // phoneNumber={profile?.mobileNumber ?? ''}",
        "                carouselItemWidth={width - 50}",
        "                walletList={walletTypeList}",
        "                onSendMoney={(_) => {",
        "                  //navigation.navigate(Route.TRANSFER_METHOD_SCREEN, {});",
        "                }}",
        "                onLinkAccount={(_) => {",
        "                  //navigation.navigate(Route.CRYPTO_LINK_ACCOUNT_SCREEN, {});",
        "                }}",
        "                onViewAllTransactions={(wallet) => {",
        "                  //navigation.navigate(Route.RECENT_TRANSACTIONS_SCREEN, { wallet });",
        "                }}",
        "                onTrade={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRADE_LIST_SCREEN, {});",
        "                }}",
        "                onViewAccount={() => {",
        "                  //navigation.navigate(Route.CRYPTO_VIEW_ACCOUNT_SCREEN, {});",
        "                }}",
        "                onTransferIn={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_IN_SCREEN, {})",
        "                }}",
        "                onTransferOut={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_OUT_SCREEN, {});",
        "                }}",
        "                onTransfer={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_IN_SCREEN, {})",
        "                }}",
        "                onViewAllCrypto={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_IN_SCREEN, {})",
        "                }}",
        "                onSearchingCrypto={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_IN_SCREEN, {})",
        "                }}",
        "                onSelectItemCurrency={() => {",
        "                  //navigation.navigate(Route.CRYPTO_TRANSFER_IN_SCREEN, {})",
        "                }}",
        "                isActive={isActive}",
        "                isWithToolTip={isWithToolTip}",
        "                children={",
        "                  <View style={{flex: 1,alignItems: 'center'}}>",
        "                    <Carousel",
        "                      showBullets={false}",
        "                      containerStyle={{marginTop: 20}}",
        "                      carouselList={carouselList}",
        "                    />",
        "                  </View>",
        "                }",
        "              />",
        "            </View>",
        "          </>"
      ],
      "functions": []
    }
  ],
  "texts": {
    "en": {
      "wallets_list_component": {
        "lbl_link_successfully": "Account Added Succefully",
        "msg_link_successfully": "Your bank account is successfully linked to your profile.",
        "btn_continue": "Continue",
        "lbl_unlink_account": "Unlink Bank Account",
        "msg_unlink_account": "Are you sure? once unlinked, you cannot undo this action.",
        "btn_cancel": "Cancel",
        "lbl_confirmation": "Confirmation",
        "msg_set_primary": "Are you sure you want to set %s as the primary account?.",
        "btn_set_primary": "Set as primary account",
        "btn_unlink_account": "Unlink bank account",
        "btn_view_transaction": "View transactions",
        "lbl_total_balance": "Total Available Balance",
        "btn_link_bank_account": "Link Bank Account",
        "lbl_set_as_primary": "Set as primary",
        "lbl_primary": "Primary",
        "msg_no_wallet": "No Bank Account Linked",
        "btn_view_cashflow": "View Cashflow",
        "lbl_cashflow": "Cashflow",
        "msg_cashflow": "View cashflow chart for your money in & money out to analyse your spending.",
        "btn_view": "View",
        "btn_share_information": "Share Information"
      },
      "wallet_card_component": {
        "btn_add_money": "Add Money",
        "btn_send_money": "Send Money",
        "lbl_recent_transactions": "Recent transactions",
        "btn_view_all": "View all",
        "msg_no_transaction": "You have no transactions yet.",
        "lbl_account_details": "UnionDigital Account Details",
        "btn_close": "Close",
        "lbl_account_name": "Account Name",
        "lbl_account_number": "Account Number",
        "lbl_mobile_number": "Mobile Number",
        "lbl_current_balance": "Current Balance",
        "msg_copied": "Text has been copied to your clipboard."
      },
      "share_information_component": {
        "lbl_recipient_email": "Recipient Email",
        "plh_enter_recipient_email": "Enter recipient email",
        "lbl_message": "Message (Optional)",
        "plh_enter_message": "Enter message",
        "lbl_data_share": "Data To Share",
        "lbl_data_account": "Account",
        "lbl_select_account": "Select a account",
        "lbl_account_transaction": "Account & Transaction Details",
        "lbl_invoices": "Invoices",
        "lbl_date_range": "Date Range",
        "lbl_from": "From",
        "lbl_to": "To",
        "val_enter_email": "Recipient email is required",
        "val_email_invalid": "Recipient email is invalid",
        "lbl_send_copy": "Send me a copy of this",
        "btn_cancel": "Cancel",
        "btn_share": "Share",
        "btn_continue": "Continue",
        "lbl_confirmation": "Confirmation",
        "msg_confirm_share": "Are you sure you want to share these sensitive information? Please click “Continue” to proceed.",
        "msg_shared_successfully": "Account Information are sent successfully",
        "lbl_unable_share": "Unable to share",
        "msg_share_failed": "An error occured while trying to share your transaction details. Please try again."
      },
      "transaction_list_component": {
        "msg_no_transaction": "No transactions found",
        "lbl_primary": "Primary",
        "lbl_summary": "Summary",
        "lbl_money_in": "Money in",
        "lbl_money_out": "Money out",
        "msg_no_wallet": "No bank account linked",
        "btn_link_bank_account": "Link bank account"
      },
      "recent_transaction_component": {
        "lbl_transaction": "Transactions",
        "btn_load_more": "Load more",
        "lbl_no_transactions": "You have no transactions yet.",
        "msg_no_transactions": "Try adding money to your %s and enjoy the rest of the UnionDigital features.",
        "btn_add_money_now": "Add money now",
        "lbl_error_transactions": "Something went wrong",
        "msg_error_transactions": "We're having difficulty trying to connect to our server. Please try again.",
        "btn_swipe_refresh": "Swipe down to refresh",
        "btn_save_gallery": "Save to gallery",
        "btn_share": "Share",
        "lbl_type_transaction": "Type of transaction",
        "lbl_transaction_details": "Transaction Details",
        "lbl_send_money_from": "Send money from",
        "lbl_send_money_to": "Send money to",
        "lbl_received_from": "Received from",
        "lbl_note_to_recipient": "Note to recipient",
        "lbl_purpose_transfer": "Purpose of transfer",
        "lbl_send_via": "Send via",
        "lbl_when": "When",
        "lbl_amount": "Amount",
        "lbl_transaction_fee": "Transaction Fee",
        "lbl_total_amount": "Total amount",
        "lbl_transaction_date": "Transaction Date / Time",
        "lbl_reference_no": "Reference No."
      },
      "add_money": {
        "lbl_title": "Add Money via Instapay or Pesonet",
        "msg_description": "In your bank’s app or online banking, enter the following information:",
        "lbl_name": "Name",
        "lbl_bank": "Bank",
        "lbl_account_number": "UnionDigital Bank Account No."
      }
    },
    "vi": {
      "wallets_list_comComponent": {
        "lbl_link_successively": "Tài khoản đã được thêm thành công",
        "msg_link_successively": "Tài khoản ngân hàng của bạn đã được liên kết thành công với hồ sơ của bạn.",
        "btn_continue": "Tiếp tục",
        "lbl_unlink_account": "Hủy liên kết tài khoản ngân hàng",
        "msg_unlink_account": "Bạn có chắc chắn không? Một khi đã hủy liên kết, bạn không thể hoàn tác hành động này.",
        "btn_cancel": "Hủy",
        "lbl_confirmation": "Xác nhận",
        "msg_set_primary": "Bạn có chắc muốn đặt %s làm tài khoản chính không?",
        "btn_set_primary": "Đặt làm tài khoản chính",
        "btn_unlink_account": "Hủy liên kết tài khoản ngân hàng",
        "btn_view_transaction": "Xem giao dịch",
        "lbl_total_balance": "Tổng số dư khả dụng",
        "btn_link_bank_account": "Liên kết tài khoản ngân hàng",
        "lbl_set_as_primary": "Đặt làm chính",
        "lbl_primary": "Chính",
        "msg_no_wallet": "Không có tài khoản ngân hàng nào được liên kết",
        "btn_view_cashflow": "Xem dòng tiền",
        "lbl_cashflow": "Dòng tiền",
        "msg_cashflow": "Xem biểu đồ dòng tiền vào và ra của tiền để phân tích chi tiêu của bạn.",
        "btn_view": "Xem",
        "btn_share_information": "Chia sẻ thông tin"
      },
      "wallet_card_comComponent": {
        "btn_add_money": "Thêm tiền",
        "btn_send_money": "Gửi tiền",
        "lbl_recent_transactions": "Giao dịch gần đây",
        "btn_view_all": "Xem tất cả",
        "msg_no_transaction": "Bạn chưa có giao dịch nào.",
        "lbl_account_details": "Chi tiết tài khoản UnionDigital",
        "btn_close": "Đóng",
        "lbl_account_name": "Tên tài khoản",
        "lbl_account_number": "Số tài khoản",
        "lbl_mobile_number": "Số di động",
        "lbl_current_balance": "Số dư hiện tại",
        "msg_copied": "Văn bản đã được sao chép vào clipboard của bạn."
      },
      "share_information_component": {
        "lbl_recipient_email": "Email người nhận",
        "plh_enter_recipient_email": "Nhập email người nhận",
        "lbl_message": "Tin nhắn (Tùy chọn)",
        "plh_enter_message": "Nhập tin nhắn",
        "lbl_data_share": "Dữ liệu để chia sẻ",
        "lbl_data_account": "Tài khoản",
        "lbl_select_account": "Chọn tài khoản",
        "lbl_account_transaction": "Chi tiết tài khoản và giao dịch",
        "lbl_invoices": "Hóa đơn",
        "lbl_date_range": "Phạm vi ngày",
        "lbl_from": "Từ",
        "lbl_to": "Tới",
        "val_enter_email": "Yêu cầu email người nhận",
        "val_email_invalid": "Email người nhận không hợp lệ",
        "lbl_send_copy": "Gửi cho tôi bản sao của cái này",
        "btn_cancel": "Hủy",
        "btn_share": "Chia sẻ",
        "btn_continue": "Tiếp tục",
        "lbl_confirmation": "Xác nhận",
        "msg_confirm_share": "Bạn có chắc chắn muốn chia sẻ những thông tin nhạy cảm này không? Vui lòng nhấp vào “Tiếp tục” để tiếp tục.",
        "msg_shared_successively": "Thông tin tài khoản được gửi thành công",
        "lbl_unable_share": "Không thể chia sẻ",
        "msg_share_failed": "Đã xảy ra lỗi khi cố gắng chia sẻ chi tiết giao dịch của bạn. Vui lòng thử lại."
      },
      "transaction_list_comComponent": {
        "msg_no_transaction": "Không tìm thấy giao dịch nào",
        "lbl_primary": "Chính",
        "lbl_summary": "Tóm tắt",
        "lbl_money_in": "Tiền vào",
        "lbl_money_out": "Rút tiền",
        "msg_no_wallet": "Không có tài khoản ngân hàng nào được liên kết",
        "btn_link_bank_account": "Liên kết tài khoản ngân hàng"
      },
      "recent_transaction_comComponent": {
        "lbl_transaction": "Giao dịch",
        "btn_load_more": "Tải thêm",
        "lbl_no_transactions": "Bạn chưa có giao dịch nào.",
        "msg_no_transactions": "Thử nạp tiền vào %s của bạn và tận hưởng các tính năng còn lại của UnionDigital.",
        "btn_add_money_now": "Nạp tiền ngay",
        "lbl_error_transactions": "Đã xảy ra lỗi",
        "msg_error_transactions": "Chúng tôi đang gặp khó khăn khi kết nối với máy chủ. Vui lòng thử lại.",
        "btn_swipe_refresh": "Vuốt xuống để làm mới",
        "btn_save_gallery": "Lưu vào thư viện",
        "btn_share": "Chia sẻ",
        "lbl_type_transaction": "Loại giao dịch",
        "lbl_transaction_details": "Chi tiết giao dịch",
        "lbl_send_money_from": "Gửi tiền từ",
        "lbl_send_money_to": "Gửi tiền tới",
        "lbl_receured_from": "Đã nhận từ",
        "lbl_note_to_recipient": "Ghi chú cho người nhận",
        "lbl_util_transfer": "Mục đích chuyển nhượng",
        "lbl_send_via": "Gửi qua",
        "lbl_when": "Khi nào",
        "lbl_amount": "Số tiền",
        "lbl_transaction_fee": "Phí giao dịch",
        "lbl_total_amount": "Tổng số tiền",
        "lbl_transaction_date": "Ngày / Giờ giao dịch",
        "lbl_reference_no": "Số tham chiếu."
      },
      "add_money": {
        "lbl_title": "Nạp tiền qua Instapay hoặc Pesonet",
        "msg_description": "Trong ứng dụng ngân hàng hoặc ngân hàng trực tuyến của bạn, nhập thông tin sau:",
        "lbl_name": "Tên",
        "lbl_bank": "Ngân hàng",
        "lbl_account_number": "Số tài khoản ngân hàng UnionDigital."
      }
    }
  }
}